<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker 相关笔记</title>
      <link href="/2020/08/10/Docker%20%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/10/Docker%20%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="在-CentOS-7-系统上安装"><a href="#在-CentOS-7-系统上安装" class="headerlink" title="在 CentOS 7 系统上安装"></a>在 CentOS 7 系统上安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">$ yum-config-manager --<span class="built_in">enable</span> docker-ce-edge</span><br><span class="line">$ yum install docker-ce</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="docker-compose-的安装"><a href="#docker-compose-的安装" class="headerlink" title="docker-compose 的安装"></a>docker-compose 的安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="使用命令启动容器示例"><a href="#使用命令启动容器示例" class="headerlink" title="使用命令启动容器示例:"></a>使用命令启动容器示例:</h2><p>涉及到了 端口映射, 文件映射 和 容器关联 相关参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name=cartoapi2  -p 8080:80 -v /root/cartoapi/.env:/app/.env --restart=always registry.cn-beijing.aliyuncs.com/newsta-sc/qianfang-api</span><br><span class="line">$ docker run -d --name=cartoweb3  -p 80:80  --restart=always -v /root/cartoweb/Constant.js:/usr/share/nginx/html/static/Constant.js   --link cartoapi2:cartoapi registry.cn-beijing.aliyuncs.com/newsta-sc/qianfang-web</span><br></pre></td></tr></table></figure><h2 id="查看最后几条日志-实时"><a href="#查看最后几条日志-实时" class="headerlink" title="查看最后几条日志+实时"></a>查看最后几条日志+实时</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -f —tail=100 container_name</span><br></pre></td></tr></table></figure><h2 id="设置Docker容器日志文件大小限制"><a href="#设置Docker容器日志文件大小限制" class="headerlink" title="设置Docker容器日志文件大小限制"></a>设置Docker容器日志文件大小限制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>增加以下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// max-size: 500m，表示一个容器日志大小上限是500M</span></span><br><span class="line"><span class="comment">// max-file: 3, 表示一个容器最多可以生成 3 个日志文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log-driver"</span>:<span class="string">"json-file"</span>,</span><br><span class="line">  <span class="attr">"log-opts"</span>: &#123;<span class="attr">"max-size"</span>:<span class="string">"500m"</span>, <span class="attr">"max-file"</span>:<span class="string">"3"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启 docker 守护进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="清理空间"><a href="#清理空间" class="headerlink" title="清理空间"></a>清理空间</h2><ol><li>清理无用镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image prune -a -f</span><br></pre></td></tr></table></figure><ol start="2"><li>清空现有日志脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"======== start clean docker containers logs ========"</span>  </span><br><span class="line"></span><br><span class="line">logs=$(find /var/lib/docker/containers/ -name *-json.log)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">log</span> <span class="keyword">in</span> <span class="variable">$logs</span>  </span><br><span class="line">        <span class="keyword">do</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"clean logs : <span class="variable">$log</span>"</span>  </span><br><span class="line">                cat /dev/null &gt; <span class="variable">$log</span>  </span><br><span class="line">        <span class="keyword">done</span>  </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"======== end clean docker containers logs ========"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 更新出错导致的蓝屏问题解决</title>
      <link href="/2020/08/10/Windows%20%E6%9B%B4%E6%96%B0%E5%87%BA%E9%94%99%E5%AF%BC%E8%87%B4%E7%9A%84%E8%93%9D%E5%B1%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/08/10/Windows%20%E6%9B%B4%E6%96%B0%E5%87%BA%E9%94%99%E5%AF%BC%E8%87%B4%E7%9A%84%E8%93%9D%E5%B1%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>Windows 太不省心, 关机时选择 <code>更新并关机</code> 结果第二天开机直接蓝屏, 错误码 <code>0xc000021a</code>, 在 Recovery 中自动修复失败, 卸载最后一次更新失败.<br>给👴整懵了.</p><p>找到来自 <a href="https://blog.csdn.net/wm9028/article/details/88133443" target="_blank" rel="noopener">CSDN 一博主的解决方案</a>, 有效, 在此记录.</p><ol><li>在 Recovery 页面进入命令行, 使用 <code>c:</code> 命令进入系统盘</li><li>命令 <code>dism /image:c:\ /cleanup-image /revertpendingactions</code></li><li>命令 <code>exit</code></li></ol><p>执行完成后重启即可. 未使用到原博中第四步内容.</p><p>原博中还备注了一个<a href="https://neosmart.net/wiki/0xc000021a/" target="_blank" rel="noopener">其他解决方案的链接</a>,  上面的操作解决不了的时候可以尝试一下.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在 CRA 项目中使用 WebWorker</title>
      <link href="/2020/04/02/%E5%9C%A8%20CRA%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%20WebWorker/"/>
      <url>/2020/04/02/%E5%9C%A8%20CRA%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%20WebWorker/</url>
      
        <content type="html"><![CDATA[<p>为了解决前端性能问题, 打算在项目中使用 WebWorker, 之前只是简单了解过, 本来以为很简单的问题,<br>真正上手的时候发现一些限制, 还得踩一点坑. 这里记录一下一个旧版本 create-reat-app 起手的项目<br>的 WebWorker 配置和踩坑过程.</p><a id="more"></a><p>这次主要是想把 axios 发出的 get 请求全部放进来.</p><h2 id="尝试原始方案"><a href="#尝试原始方案" class="headerlink" title="尝试原始方案"></a>尝试原始方案</h2><p>刚开始接触一样东西的时候, 还是得按原生的来, 看一眼 MDN 文档, 参照示例来呗.</p><p>创建 axiosWorker.js, 内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">onmessage = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = e</span><br><span class="line">  axios.get(data.url, data.options).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    postMessage(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">data</span>: res.data &#125;)</span><br><span class="line">    close()</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    postMessage(&#123; <span class="attr">status</span>: <span class="number">2</span>, error &#125;)</span><br><span class="line">    close()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于是现有项目, 程序中的 axios 都是从一个定义拦截器的 js 里 export 出来的,<br>正好在这边覆盖 axios.get 方法. 在 interceptor.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">axios.get = <span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(<span class="string">'axiosWorker.js'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    worker.onmessage = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = e</span><br><span class="line">      <span class="keyword">if</span> (data.status === <span class="number">1</span>) &#123;</span><br><span class="line">        resolve(&#123; <span class="attr">data</span>: data.res &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(data)</span><br><span class="line">      &#125;</span><br><span class="line">      close()</span><br><span class="line">    &#125;</span><br><span class="line">    worker.postMessage(&#123; url, options &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑起来! 哦, 跑不起来…</p><p>因为 WebWorker 是一个运行时脚本, 这 <code>import</code> 语句直接报错啊. 先把 <code>node_modules/axios/dist/axios.min.js</code> 拷到 <code>public</code> 目录下,<br>当做静态资源试一下吧. 而且 <code>axiosWorker.js</code> 里面的 <code>import</code> 需要变成 <code>importScript()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">importScript(<span class="string">`<span class="subst">$&#123;origin&#125;</span>/axios.min.js`</span>) <span class="comment">// 这块直接 / 开头是不行的, 好在里面直接提供了 origin</span></span><br></pre></td></tr></table></figure><p>跑起来!</p><p>这第一版算是能用了</p><p>这些操作有几个关键点:</p><ul><li><code>postMessage</code> 传参数的方式的复制, 不传引用, 所以不能传递函数参数. 所以在 worker 中的 axios 的 then 方法中不能直接<br>把 res 传回来. 要根据情况拿需要的字段回传</li><li>worker 用完记得关掉线程. 在 worker 中可以用 <code>close()</code>, 在主线程中可以用 <code>woker.terminate()</code></li></ul><p>这波也有几个问题:</p><ul><li>每次请求都创建新的 worker, 感觉没必要, 能不能复用呢</li><li>worker 里面没法直接引用 node_modules 里的包, 以后岂不是还是很麻烦</li><li>有个别 api axios 会报出请求的 url 语法错误, 搞了好久也没找到问题</li></ul><h2 id="进一步"><a href="#进一步" class="headerlink" title="进一步"></a>进一步</h2><h3 id="首先解决-worker-复用问题"><a href="#首先解决-worker-复用问题" class="headerlink" title="首先解决 worker 复用问题"></a>首先解决 worker 复用问题</h3><p>这里面有几个重点:</p><ul><li><code>worker.onmessage</code> 要换成 <code>worker.addEventListener(&#39;message&#39;, e =&gt; {...})</code>, 否则每次都会覆盖掉之前的回调,<br>在连续发出请求时, 只会触发最后一次赋给的回调. 并且每个回调触发后要取消掉当前的事件监听回调</li><li>需要一个计数器, 用这个数字在回调中匹配发出的请求 (当 worker postMessage 的时候, 每个回调都会触发, 判断不匹配时应该不处理)</li></ul><p>修改后的 axiosWorker.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">importScript(<span class="string">`<span class="subst">$&#123;origin&#125;</span>/axios.min.js`</span>)</span><br><span class="line"></span><br><span class="line">onmessage = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = e</span><br><span class="line">  axios.get(data.url, data.options).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    postMessage(&#123; <span class="attr">reqId</span>: data.reqId, <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">data</span>: res.data &#125;)</span><br><span class="line">    close()</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    postMessage(&#123; <span class="attr">reqId</span>: data.reqId, <span class="attr">status</span>: <span class="number">2</span>, error &#125;)</span><br><span class="line">    close()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的 interceptor.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(<span class="string">'axiosWorker.js'</span>)</span><br><span class="line"><span class="keyword">let</span> axios_req_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">axios.get = <span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reqId = axios_req_sum++</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = e</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (data.reqId !== reqId) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      worker.removeEventListener(<span class="string">'message'</span>, callback)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (data.status === <span class="number">1</span>) &#123;</span><br><span class="line">        resolve(&#123; <span class="attr">data</span>: data.res &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    worker.addEventListener(<span class="string">'message'</span>, callback)</span><br><span class="line">    worker.postMessage(&#123; reqId, url, options &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本行了</p><h3 id="import-问题"><a href="#import-问题" class="headerlink" title="import 问题"></a>import 问题</h3><p>上面的基本行了, 但是不能直接 import 的限制还是很难受, 以后咋整啊. </p><p>找了一圈, 解决方案还是很多的, 但是没有明确针对 cra 的…, 咱这种没 eject 的项目, 还是得参照 webpack 的配置摸索</p><p>最后选了一个还算简单的 <a href="https://github.com/webpack-contrib/worker-loader" target="_blank" rel="noopener"><code>worker-loader</code></a>, webpack 出的.<br>我看原理应该就是在 serve 和 hotload 时提前把 worker 文件转译成静态文件, 然后再创建 Worker. 这样 worker 里面就能直接用<br>npm 装的包了</p><p>在 <code>config-overrides.js</code> 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; addWebpackModuleRule &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line"></span><br><span class="line">  config =&gt; (&#123;</span><br><span class="line">    ...config,</span><br><span class="line">    output: &#123;</span><br><span class="line">      ...config.output,</span><br><span class="line">      globalObject: <span class="string">'this'</span>    <span class="comment">// 这个很重要, 否则热重载会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  addWebpackModuleRule(&#123;      <span class="comment">// 这块配置 worker-loader</span></span><br><span class="line">    test: <span class="regexp">/\.worker\.js$/</span>,</span><br><span class="line">    use: &#123; <span class="attr">loader</span>: <span class="string">'worker-loader'</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后根据上面 loader 的配置, 把 <code>axiosWorker.js</code> 改成 <code>axios.worker.js</code> (就是 <code>.worker.js</code> 结尾🐎), 里面的<br><code>importScript</code> 也可以直接变成 <code>import</code> 了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>然后 <code>interceptor.js</code> 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AxiosWorker <span class="keyword">from</span> <span class="string">'axios.worker.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> AxiosWorker()    <span class="comment">// 直接 new 出来就是 worker 实例了</span></span><br><span class="line"><span class="keyword">let</span> axios_req_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">axios.get = <span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reqId = axios_req_sum++</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = e</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (data.reqId !== reqId) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      worker.removeEventListener(<span class="string">'message'</span>, callback)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (data.status === <span class="number">1</span>) &#123;</span><br><span class="line">        resolve(&#123; <span class="attr">data</span>: data.res &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    worker.addEventListener(<span class="string">'message'</span>, callback)</span><br><span class="line">    worker.postMessage(&#123; reqId, url, options &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完事. worker 中可以直接引用 node_module 中的库了. 不知道咋回事的 axios url 语法错误问题也不见了…</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> create-react-app </tag>
            
            <tag> WebWorker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方便地在 Linux 上安装 Node.js</title>
      <link href="/2020/03/23/%E6%96%B9%E4%BE%BF%E5%9C%B0%E5%9C%A8%20Linux%20%E4%B8%8A%20%E5%AE%89%E8%A3%85%20Node.js/"/>
      <url>/2020/03/23/%E6%96%B9%E4%BE%BF%E5%9C%B0%E5%9C%A8%20Linux%20%E4%B8%8A%20%E5%AE%89%E8%A3%85%20Node.js/</url>
      
        <content type="html"><![CDATA[<p>Linux 自带的软件包总是没法直接安装到最新的版本. 从源码构建吧, 咱这种不熟悉 cmake 啥的的人, 一旦遇到错误,<br>就要花费很多时间去处理, 终于又一次发现了这个, 可以方便快速地在 Linux 上安装 Nodejs</p><a id="more"></a><blockquote><p><a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">Github Repo</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Using Ubuntu</span><br><span class="line">curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_11.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"># Using Debian, as root</span><br><span class="line">curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_11.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"># Using CentOS&#x2F;Fedora</span><br><span class="line">curl -sL https:&#x2F;&#x2F;rpm.nodesource.com&#x2F;setup_11.x | bash -</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>私有 NPM 仓库搭建记录</title>
      <link href="/2020/03/23/%E7%A7%81%E6%9C%89%20NPM%20%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/23/%E7%A7%81%E6%9C%89%20NPM%20%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>公司内部会有很多公用组件, 不方便上传到 npm 官方仓库进行管理, 选择搭建私有 NPM 仓库, 方便管理.</p><p>市面上很多相关开源项目, 功能上大同小异, 这里选择使用<a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a>.</p><a id="more"></a><h2 id="服务端搭建"><a href="#服务端搭建" class="headerlink" title="服务端搭建"></a>服务端搭建</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>Verdaccio 是基于 Node 的, 为了方便, 这里选择使用 <code>Docker</code> 和 <code>docker-compose</code>. 他们的安装见<a href="https://www.docker.com/get-started" target="_blank" rel="noopener">官网</a></p><p>创建 <code>Verdaccio</code> 目录, 用于存放相关的内容. 该目录中还需创建</p><ul><li><code>config</code> 目录用于存放自定义配置文件</li><li><code>plugins</code> 目录用于存放插件文件</li><li><code>storage</code> 目录用于存储</li></ul><h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><ol><li><code>Verdaccio</code> 配置</li></ol><p>创建 <code>Verdaccio/config/config.yaml</code> 文件, 写入项目中的默认 docker 用法的配置 (源码/conf/docker.yaml). 内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is the config file used for the docker images.</span></span><br><span class="line"><span class="comment"># It allows all users to do anything, so don't use it on production systems.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Do not configure host and port under `listen` in this file</span></span><br><span class="line"><span class="comment"># as it will be ignored when using docker.</span></span><br><span class="line"><span class="comment"># see https://verdaccio.org/docs/en/docker#docker-and-custom-port-configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Look here for more config file examples:</span></span><br><span class="line"><span class="comment"># https://github.com/verdaccio/verdaccio/tree/master/conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># path to a directory with all packages</span></span><br><span class="line"><span class="attr">storage:</span> <span class="string">/verdaccio/storage/data</span></span><br><span class="line"><span class="comment"># path to a directory with plugins to include</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">/verdaccio/plugins</span></span><br><span class="line"></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="comment"># WebUI is enabled as default, if you want disable it, just uncomment this line</span></span><br><span class="line">  <span class="comment">#enable: false</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Verdaccio</span></span><br><span class="line">  <span class="comment"># comment out to disable gravatar support</span></span><br><span class="line">  <span class="comment"># gravatar: false</span></span><br><span class="line">  <span class="comment"># by default packages are ordercer ascendant (asc|desc)</span></span><br><span class="line">  <span class="comment"># sort_packages: asc</span></span><br><span class="line"></span><br><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">htpasswd:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">/verdaccio/storage/htpasswd</span></span><br><span class="line">    <span class="comment"># Maximum amount of users allowed to register, defaults to "+infinity".</span></span><br><span class="line">    <span class="comment"># You can set this to -1 to disable registration.</span></span><br><span class="line">    <span class="comment"># max_users: 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a list of other known repositories we can talk to</span></span><br><span class="line"><span class="attr">uplinks:</span></span><br><span class="line">  <span class="attr">npmjs:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://registry.npmjs.org/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="string">'@*/*'</span><span class="string">:</span></span><br><span class="line">    <span class="comment"># scoped packages</span></span><br><span class="line">    <span class="attr">access:</span> <span class="string">$all</span></span><br><span class="line">    <span class="attr">publish:</span> <span class="string">$authenticated</span></span><br><span class="line">    <span class="attr">unpublish:</span> <span class="string">$authenticated</span></span><br><span class="line">    <span class="attr">proxy:</span> <span class="string">npmjs</span></span><br><span class="line"></span><br><span class="line">  <span class="string">'**'</span><span class="string">:</span></span><br><span class="line">    <span class="comment"># allow all users (including non-authenticated users) to read and</span></span><br><span class="line">    <span class="comment"># publish all packages</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># you can specify usernames/groupnames (depending on your auth plugin)</span></span><br><span class="line">    <span class="comment"># and three keywords: "$all", "$anonymous", "$authenticated"</span></span><br><span class="line">    <span class="attr">access:</span> <span class="string">$all</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># allow all known users to publish/publish packages</span></span><br><span class="line">    <span class="comment"># (anyone can register by default, remember?)</span></span><br><span class="line">    <span class="attr">publish:</span> <span class="string">$authenticated</span></span><br><span class="line">    <span class="attr">unpublish:</span> <span class="string">$authenticated</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if package is not available locally, proxy requests to 'npmjs' registry</span></span><br><span class="line">    <span class="attr">proxy:</span> <span class="string">npmjs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">middlewares:</span></span><br><span class="line">  <span class="attr">audit:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log settings</span></span><br><span class="line"><span class="attr">logs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">type:</span> <span class="string">stdout,</span> <span class="attr">format:</span> <span class="string">pretty,</span> <span class="attr">level:</span> <span class="string">http</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="comment">#- &#123;type: file, path: verdaccio.log, level: info&#125;</span></span><br><span class="line"><span class="comment">#experiments:</span></span><br><span class="line"><span class="comment">#  # support for npm token command</span></span><br><span class="line"><span class="comment">#  token: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This affect the web and api (not developed yet)</span></span><br><span class="line"><span class="comment">#i18n:</span></span><br><span class="line"><span class="comment">#web: en-US</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>docker-compose</code> 配置</li></ol><p>创建 <code>Verdaccio/docker-compose.yml</code> 文件, 写入内容:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">verdaccio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">verdaccio/verdaccio</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">"verdaccio"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node-network</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VERDACCIO_PORT=4873</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"4873:4873"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"./storage:/verdaccio/storage"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"./config:/verdaccio/conf"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"./plugins:/verdaccio/plugins"</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">node-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入 <code>Verdaccio</code> 目录, 执行 <code>$ docker-compose up -d</code> 即可启动 <code>verdaccio</code> 容器.</p><p>这里有遇到一个错误, <code>$ docker logs verdaccio</code> 容器内没有访问我们创建的存储目录的权限. 来到 <code>Verdaccio</code> 的上层目录,<br>执行 <code>$ chown -R 10001:65533 Verdaccio/</code> 将仓库所有者变更为启动 <code>verdaccio</code> 容器的用户(Verdaccio 默认的用户 ID),<br>然后 <code>$ docker restart verdaccio</code> 重启容器即可.</p><p>此时服务端基本配置完成, 访问 <code>ip:4873</code>, 应得到如下内容</p><p><img src="/images/20200323/verdaccio_default.png" alt=""></p><p>NOTE: 使用云服务器要注意主机的防火墙和控制台的防火墙要打开 4873 端口</p><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><h4 id="一次性应用"><a href="#一次性应用" class="headerlink" title="一次性应用"></a>一次性应用</h4><h5 id="预先配置"><a href="#预先配置" class="headerlink" title="预先配置"></a>预先配置</h5><p>为私有仓库添加账户. 执行以下命令, 并键入要求的信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm adduser --registry http://ip:4873</span><br></pre></td></tr></table></figure><h5 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h5><p>进入要发布的包目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm publish --registry http://ip:4873</span><br></pre></td></tr></table></figure><h5 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --registry http://ip:4873 packagename</span><br></pre></td></tr></table></figure><h5 id="删除包-取消发布"><a href="#删除包-取消发布" class="headerlink" title="删除包(取消发布)"></a>删除包(取消发布)</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm unpublish --force packagename</span><br></pre></td></tr></table></figure><h4 id="全局应用配置"><a href="#全局应用配置" class="headerlink" title="全局应用配置"></a>全局应用配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">set</span> registry http://ip:4873</span><br><span class="line">$ npm adduser --registry http://ip:4873</span><br><span class="line">$ npm profile <span class="built_in">set</span> password --registry http://ip:4873</span><br></pre></td></tr></table></figure><p>关于全局应用, 下面会提及.</p><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><p>笔者未找到 Yarn 官方提供的一次性使用方法, 但是在 <a href="https://stackoverflow.com/a/58480279" target="_blank" rel="noopener">StackOverflow</a> 找到一种方案</p><h4 id="发布包-1"><a href="#发布包-1" class="headerlink" title="发布包"></a>发布包</h4><p>进入要发布的包目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ YARN_REGISTRY=<span class="string">"http://ip:4873"</span> yarn publish</span><br></pre></td></tr></table></figure><h4 id="安装包-1"><a href="#安装包-1" class="headerlink" title="安装包"></a>安装包</h4><p>进入要发布的包目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ YARN_REGISTRY=<span class="string">"http://ip:4873"</span> yarn add packagename</span><br></pre></td></tr></table></figure><h4 id="全局应用配置-1"><a href="#全局应用配置-1" class="headerlink" title="全局应用配置"></a>全局应用配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn config <span class="built_in">set</span> registry http://ip:4873</span><br></pre></td></tr></table></figure><h3 id="关于全局应用"><a href="#关于全局应用" class="headerlink" title="关于全局应用"></a>关于全局应用</h3><p>使用一次性应用方法安装的包, 在统一执行安装依赖命令 <code>$ npm install</code> 会出麻烦, 因为在官方仓库没有我们发布的包.<br>使用全局应用的方式, 配合服务端的上游代理, 可以实现用正常的命令来安装私有和公共包. </p><p>Verdaccio 默认配置上游代理为 <code>npmjs</code>, 实践中发现如果客户端使用的是 yarn, 可能会出现部分公共包安装失败的情况,<br>所以使用 <code>yarnpkg</code> 作为上端. 配置方法如下</p><p>编辑服务端 <code>Verdaccio/config/config.yaml</code></p><ol><li>在 <code>uplink</code> 块下增加 <code>yarnpkg</code> 源</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yarnpkg:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://registry.yarnpkg.com/</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <code>packages</code> 块的子项的 <code>proxy</code> 值</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy:</span> <span class="string">yarnpkg</span></span><br></pre></td></tr></table></figure><p>保存后, 使用 <code>$ docker restart verdaccio</code> 重启 <code>verdaccio</code> 容器, 完成.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建 V2ray</title>
      <link href="/2020/03/22/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%20V2ray/"/>
      <url>/2020/03/22/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%20V2ray/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.v2ray.com/chapter_00/install.html" target="_blank" rel="noopener">官网</a></p><p>V2ray 当前很流行, 相比 ss 更不容易被 ban. 这玩意功能很强大, 配置项太多了, 咱一时半会儿也搞不清楚啊, 先来个最基本的配置, 安排上再说吧</p><a id="more"></a><h2 id="Linux-一键安装"><a href="#Linux-一键安装" class="headerlink" title="Linux 一键安装"></a>Linux 一键安装</h2><p>官方的嗷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><h2 id="简单的配置"><a href="#简单的配置" class="headerlink" title="简单的配置"></a>简单的配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/v2ray/config.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log"</span>: &#123;</span><br><span class="line">        <span class="attr">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">        <span class="attr">"error"</span>: <span class="string">"/var/log/v2ray/error.log"</span>,</span><br><span class="line">        <span class="attr">"loglevel"</span>: <span class="string">"warning"</span></span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="attr">"inbounds"</span>: [&#123;</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">10086</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"clients"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="string">"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"</span>,</span><br><span class="line">          <span class="attr">"level"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"alterId"</span>: <span class="number">64</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [&#123;</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;&#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"routing"</span>: &#123;</span><br><span class="line">    <span class="attr">"rules"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"ip"</span>: [<span class="string">"geoip:private"</span>],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者直接用 <a href="https://intmainreturn0.com/v2ray-config-gen/" target="_blank" rel="noopener">生成器</a> 生成</p><p>改完配置 <code>systemctl restart v2ray</code> 就完事了, 然后客户端安排</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac 端使用 Qt 构建 RDM 记录</title>
      <link href="/2020/03/21/Mac%20%E7%AB%AF%E4%BD%BF%E7%94%A8%20Qt%20%E6%9E%84%E5%BB%BA%20RDM%20%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/21/Mac%20%E7%AB%AF%E4%BD%BF%E7%94%A8%20Qt%20%E6%9E%84%E5%BB%BA%20RDM%20%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://redisdesktop.com/" target="_blank" rel="noopener">RDM</a> 是一款方便, 高性能的 redis gui 工具, 在我用过的为数不多的 redis 工具中, 我觉得他的最好用的点就是<br>它使用树形结构显示 key, 查找非常方便.</p><p>这款工具使用了订阅制, 但是用户可以免费得到他的源码. 这里是一个 Qt 和 C 的小白从源码构建 mac 端 RDM 应用的方法</p><a id="more"></a><ol><li>从 github 克隆 rdm 源码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;uglide&#x2F;RedisDesktopManager.git -b 0.9.8 rdm &amp;&amp; cd .&#x2F;rdm</span><br></pre></td></tr></table></figure><p>–recursive 参数使其附带了依赖项的仓库</p><p>指定 0.9.8 分支是因为其后的版本不带 ssh 了??? </p><ol start="2"><li>搞配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd .&#x2F;src &amp;&amp; cp .&#x2F;resources&#x2F;Info.plist.sample .&#x2F;resources&#x2F;Info.plist</span><br></pre></td></tr></table></figure><ol start="3"><li>编译</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;configure</span><br></pre></td></tr></table></figure><p>依赖 <code>cmake</code> 和 <code>openssl</code>, 如未安装, 先使用 <code>brew</code> 安装它们.</p><blockquote><p>可能出现 <code>error: Compiling for earlier than macOS 10.6 is no longer supported.</code> 错误, 解决方法是: 使用 xcode 打开 <code>3rdparty/gbreakpad/src/client/mac/sender/Breakpad.xib</code> 文件, 在右侧找到 <code>Builds for</code> 选项, 选择一个最近的 macos 版本.</p></blockquote><blockquote><p>可能出现 <code>Error: openssl already installed</code> 错误. 解决办法是编辑 <code>src/configure</code>, 用 <code>#</code> 注释 <code>brew upgrade openssl || brew install openssl || true</code> 行, 还有注意  <code>OPENSSL_ROOT_DIR</code> 要是正确的.</p></blockquote><ol start="4"><li>Qt构建</li></ol><p>使用 Qt 打开 <code>src/rdm.pro</code> , 然后在 Qt 中编辑 <code>rdm.pro</code> 文件, 找到 <code>CONFIG-=app_bundle</code> 更改为 <code>CONFIG-=debug</code>. 这一步是为了使构建后生成 .app 程序为文件.</p><p>然后 点击 <code>项目 &gt; Desktop...</code>, 然后构建配置选择 <code>Release</code>, 然后点击左下角的锤子标志开始构建.</p><blockquote><p>这时可能会出现找不到 <code>crashreporter</code> 的错误, 下载它然后放到 构建输出目录( <code>bin/osx/release/</code> )下, 再次开始构建.</p></blockquote><p>构建完成后, 可以在 <code>bin/osx/release/</code> 目录下找到 rdm 了, 此时这个程序只能在本机运行, 因为这个 app 中未包含依赖项.</p><ol start="5"><li>混入依赖</li></ol><p>使用 Qt 自带的工具为 app 混入依赖.</p><p>在构建出的 rdm.app 目录中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~&#x2F;Qt&#x2F;5.11.0&#x2F;clang_64&#x2F;bin&#x2F;macdeployqt rdm.app -qmldir&#x3D;..&#x2F;..&#x2F;..&#x2F;src&#x2F;qml</span><br></pre></td></tr></table></figure><p>完成后,  rdm.app 就可以使用了.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CRA 起手的项目部署在非根目录</title>
      <link href="/2020/03/21/CRA%E8%B5%B7%E6%89%8B%E7%9A%84%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E9%9D%9E%E6%A0%B9%E7%9B%AE%E5%BD%95/"/>
      <url>/2020/03/21/CRA%E8%B5%B7%E6%89%8B%E7%9A%84%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E9%9D%9E%E6%A0%B9%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>项目遇到要放到服务端非根目录的情况, cra 和 antd 默认的配置直接放的话会导致一些资源加载错误,<br>需要更改一些配置.</p><a id="more"></a><ol><li>在 <code>package.json</code> 中使用 <code>homepage</code> 字段指定静态文件所在的路径, 如</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;homepage&quot;: &quot;http:&#x2F;&#x2F;localhost:8000&#x2F;build&quot;</span><br></pre></td></tr></table></figure><p>在加载静态资源时, 将此地址视为跟目录</p><ol start="2"><li>如果使用了前端单页路由, 应替换掉 <code>&lt;Router&gt;</code>, 可以使用 <code>&lt;BrowserRouter&gt;</code>, 并设置 <code>basename</code> 属性, 它是所有位置的基本URL。如果您的应用程序是从服务器上的子目录提供的，则需要将其设置为子目录。格式正确的基本名称应该有一个前导斜杠，但没有尾部斜杠</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter</span><br><span class="line">  basename&#x3D;&quot;&#x2F;build&quot;</span><br><span class="line">  history&#x3D;&#123;AppHistory&#125;</span><br><span class="line">&gt;</span><br><span class="line">    ....</span><br><span class="line">&lt;&#x2F;BrowserRouter&gt;</span><br></pre></td></tr></table></figure><p>如果前端资源不是直接放在静态服务器中, 而是放在后端框架的静态资源目录下(如 php laravel 的 <code>public</code> 目录), 使用 <code>BrowserRouter</code> 会有 <code>404</code> 错误, 可以使用 <code>HashRouter</code></p><p>NOTE: 哦??? 使用 <code>HashRouter</code> 之后发现貌似不需要设置 <code>basename</code> 了…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端 devServer 中使用多个 env 的方法</title>
      <link href="/2019/04/20/%E5%89%8D%E7%AB%AFdevserver%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAenv%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/20/%E5%89%8D%E7%AB%AFdevserver%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAenv%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>项目中遇到需要针对多套演示环境来 build, 每套环境需要使用不同的变量的问题.<br>比如不同的环境使用了不同的 api 端口.</p><a id="more"></a><p>在 package.json 中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"sh -ac '. .env.dev; react-app-rewired start'"</span>,</span><br><span class="line">    <span class="attr">"build:newsta"</span>: <span class="string">"sh -ac '. .env.newsta; react-app-rewired build'"</span>,</span><br><span class="line">    <span class="attr">"build:release"</span>: <span class="string">"sh -ac '. .env.release; react-app-rewired build'"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"react-app-rewired test --env=jsdom"</span>,</span><br><span class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时创建相应的 .env 文件, 即可在使用不同命令时使用不同的 env<br>如使用 <code>yarn start</code> 命令使用的是 <code>.env.dev</code><br>使用 <code>yarn build:release</code> 命令使用的是 <code>.env.release</code></p><h2 id="更新-CRA官网寻找到的方案-支持-Windows-开发环境"><a href="#更新-CRA官网寻找到的方案-支持-Windows-开发环境" class="headerlink" title="更新: CRA官网寻找到的方案, 支持 Windows 开发环境"></a>更新: CRA官网寻找到的方案, 支持 Windows 开发环境</h2><p>使用 <code>env-cmd</code> 帮助建立 env, 在 <code>package.json</code> 中:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "env-cmd -f .env.dev react-app-rewired start",</span><br><span class="line">  "build": "env-cmd -f .env.build react-app-rewired build",</span><br><span class="line">  "test": "react-scripts test",</span><br><span class="line">  "eject": "react-scripts eject"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Command line proxy alias</title>
      <link href="/2019/03/07/commandLineProxyAlias/"/>
      <url>/2019/03/07/commandLineProxyAlias/</url>
      
        <content type="html"><![CDATA[<p>在终端中, 默认是不走代理的, 需要手动指定代理. 每次手打命令太麻烦, 把命令弄成别名, 方便调用</p><a id="more"></a><p>Put into ~/.zshrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ss=<span class="string">"export http_proxy=http://127.0.0.1:8001; export https_proxy=http://127.0.0.1:8001;"</span></span><br><span class="line"><span class="built_in">alias</span> uss=<span class="string">"unset http_proxy;unset https_proxy;"</span></span><br></pre></td></tr></table></figure><p>然后执行 <code>$ source ~/.zshrc</code> 使其立即生效</p><p>使用 <code>$ ss</code> 命令即可使用代理, 使用 <code>$ uss</code> 取消代理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>igakki.com 使用 https 记录</title>
      <link href="/2018/08/01/igakki.com%E4%BD%BF%E7%94%A8https%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/08/01/igakki.com%E4%BD%BF%E7%94%A8https%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>之前 blog 没放在 GitPages, 是在 VPS 上手动搭建的 Wordpress, 这里介绍当时给战站点上 HTTPS 的方法.</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>centos 7</li><li>nginx</li><li>wordpress</li></ul><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p><a href="https://certbot.eff.org/lets-encrypt/centosrhel7-nginx" target="_blank" rel="noopener">链接</a></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ol><li>启用 EPEL</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y yum-utils</span><br><span class="line">$ yum-config-manager --<span class="built_in">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 Certbot</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install python2-certbot-nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>生成并自动配置证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ certbot --nginx</span><br></pre></td></tr></table></figure><p>按照提示输入相应信息即可自动完成配置</p><p>若想要生成证书后手动配置, 使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ certbot --nginx certonly</span><br></pre></td></tr></table></figure><ol start="4"><li>续订证书<br>证书可用 90 天, 续订</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ certbot renew</span><br></pre></td></tr></table></figure><p>示例: 在每天的中午和午夜自动续订</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 0 0,12 * * * python -c <span class="string">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><ol><li>不要忘记在防火墙打开 443 端口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>补充如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT</span><br></pre></td></tr></table></figure><p>保存后重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart iptables.service</span><br></pre></td></tr></table></figure><ol start="2"><li>浏览器提示证书不安全</li></ol><p>检查 fullchain.pem (具体路径在安装完成时有提示)中是否包含了中间证书<br>安装证书时输入的 domain 与网站 DNS A记录 (或者说 nginx 配置的 server_name ?) 是否匹配 (不能只用根域名, 比如 <a href="http://www.igakki.com">www.igakki.com</a> 不能填写 igakki.com, 虽然都能访问)</p><h2 id="一个自动配置后的-nginx-配置"><a href="#一个自动配置后的-nginx-配置" class="headerlink" title="一个自动配置后的 nginx 配置"></a>一个自动配置后的 nginx 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name  www.igakki.com;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">    root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;wordpress;</span><br><span class="line">    index  index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">    #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#39;s document root</span><br><span class="line">    # concurs with nginx&#39;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ &#x2F;\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl; # managed by Certbot</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;www.igakki.com&#x2F;fullchain.pem; # managed by Certbot</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;www.igakki.com&#x2F;privkey.pem; # managed by Certbot</span><br><span class="line">    include &#x2F;etc&#x2F;letsencrypt&#x2F;options-ssl-nginx.conf; # managed by Certbot</span><br><span class="line">    ssl_dhparam &#x2F;etc&#x2F;letsencrypt&#x2F;ssl-dhparams.pem; # managed by Certbot</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    if ($host &#x3D; www.igakki.com) &#123;</span><br><span class="line">        return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">    &#125; # managed by Certbot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if ($host &#x3D; igakki.com) &#123;</span><br><span class="line">        return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">    &#125; # managed by Certbot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.igakki.com;</span><br><span class="line">    return 404; # managed by Certbot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在 VSCode 中使用 cmder</title>
      <link href="/2018/01/27/%E5%9C%A8VSCode%E4%B8%AD%E4%BD%BF%E7%94%A8cmder/"/>
      <url>/2018/01/27/%E5%9C%A8VSCode%E4%B8%AD%E4%BD%BF%E7%94%A8cmder/</url>
      
        <content type="html"><![CDATA[<p>cmder 是 windows 平台用来代替 cmd 和 powershell 的很好的工具, 对于习惯操作 Linux 的人来说要顺手许多.<br>这里介绍的是如何在 VSCode 中调用 cmder.</p><a id="more"></a><p>下载 cmder ,将其解压到要安装的目录.<br>设置 <code>cmder.exe</code> 使用管理员权限运行, 防止使用中权限不足. 右键 <code>cmder.exe</code> &gt; 属性 &gt; 兼容性 , 勾选 <code>以管理员身份运行此程序</code> &gt; 确定 .</p><p>在 <code>cmder.exe</code> 同级目录下, 新建 <code>vscode.bat</code> 文件, 输入以下内容:</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">SET</span> CMDER_ROOT=C:\Program Files (x86)\cmder     #这里是 cmder 的安装路径</span><br><span class="line">"<span class="variable">%CMDER_ROOT%</span>\vendor\init.bat"</span><br></pre></td></tr></table></figure><p>打开 VScode , 选择 文件 &gt; 首选项 &gt; 设置 , 添加如下选项:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe",</span><br><span class="line">"terminal.integrated.shellArgs.windows": [</span><br><span class="line">    "/K",</span><br><span class="line">    "C:\\Program Files (x86)\\cmder\\vscode.bat"        #刚才新建的 vscode.bat 的路径, 注意斜线位置要有转义符</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><code>ctrl + s</code> 保存后, 按 <code>ctrl + ~</code> 打开 vscode 终端, 点击右侧的垃圾桶(终止终端)标志将目前的终端窗口删除, 然后按加号(新建终端)新建终端, 新建的终端就调用 cmder 了.</p><ul><li>cmder 环境变量问题</li></ul><p>我们在 windows 系统设置中手动定义环境变量后, 在 cmd 中可以正常使用, 但是在 cmder 中不能使用, 要单独在 cmder 的设置中定义才可以, 很麻烦.<br>解决方法是, 在系统环境变量中, 添加 cmder 的路径, 并将其顺序向上移动到第一顺位.<br>这样在下面定义的环境变量就都可以在 cmder 中使用了.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些 JS</title>
      <link href="/2018/01/22/%E4%B8%80%E4%BA%9Bjs/"/>
      <url>/2018/01/22/%E4%B8%80%E4%BA%9Bjs/</url>
      
        <content type="html"><![CDATA[<p>整理一些常用的 js 方法 </p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 数组去重</span><br><span class="line"> *</span><br><span class="line"> **&#x2F;</span><br><span class="line">function unique (arr) &#123;</span><br><span class="line">    const seen &#x3D; new Map()</span><br><span class="line">    return arr.filter((a) &#x3D;&gt; !seen.has(a - 0) &amp;&amp; seen.set(a - 0, 1))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 插入排序</span><br><span class="line"> *</span><br><span class="line"> **&#x2F;</span><br><span class="line">function insertSort (arr) &#123;</span><br><span class="line">    let len &#x3D; arr.length;</span><br><span class="line">    for (let i &#x3D; 1; i &lt; len; i++) &#123;</span><br><span class="line">        let temp &#x3D; arr[i],</span><br><span class="line">            j;</span><br><span class="line">        for (j &#x3D; i - 1; j &gt;&#x3D; 0 &amp;&amp; temp &lt; arr[j]; j--) &#123;</span><br><span class="line">            arr[j + 1] &#x3D; arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + 1] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 获取url参数</span><br><span class="line"> *</span><br><span class="line"> **&#x2F;</span><br><span class="line">let url &#x3D; window.location.search;</span><br><span class="line">    url &#x3D; url.substring(url.indexOf(&#39;?&#39;) + 1, url.length);</span><br><span class="line">function getQueryString(name) &#123;</span><br><span class="line">    let reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + name + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;);</span><br><span class="line">    let r &#x3D; url.match(reg);</span><br><span class="line">    if (r !&#x3D; null) return (r[2]);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 去掉字符串中的 html 标签</span><br><span class="line"> **&#x2F;</span><br><span class="line">str &#x3D; str.replace(&#x2F;&lt;[^&gt;]+&gt;&#x2F;g, &quot;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 原生方法格式化时间</span><br><span class="line"> **&#x2F;</span><br><span class="line">const dateTimeString &#x3D; new Intl.DateTimeFormat(&#39;zh&#39;,&#123;</span><br><span class="line">    hour12: false,</span><br><span class="line">    year: &#39;numeric&#39;,</span><br><span class="line">    month: &#39;2-digit&#39;,</span><br><span class="line">    day: &#39;2-digit&#39;,</span><br><span class="line">    hour: &#39;2-digit&#39;,</span><br><span class="line">    minute: &#39;2-digit&#39;,</span><br><span class="line">    second: &#39;2-digit&#39;</span><br><span class="line">&#125;).format(new Date()).replace(&#x2F;\&#x2F;&#x2F;g, &#39;-&#39;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LNMP 环境配置</title>
      <link href="/2017/09/08/LNMP/"/>
      <url>/2017/09/08/LNMP/</url>
      
        <content type="html"><![CDATA[<p>手动配置 LNMP 环境的记录</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>配置防火墙，开启80端口、3306端口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /etc/sysconfig/iptables</span><br><span class="line">$ vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>添加如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">############ 添加好之后防火墙###########################</span><br><span class="line"># Firewall configuration written by system-config-firewall</span><br><span class="line"># Manual customization of this file is not recommended.</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT</span><br><span class="line">-A INPUT -m state –state NEW -m tcp -p tcp –dport 3306 -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT –reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT –reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><p><code>$ :wq</code> 保存退出后,  重启防火墙使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/iptables restart</span><br></pre></td></tr></table></figure><ol start="2"><li>关闭SELINUX</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /etc/selinux/config</span><br><span class="line">$ vi /etc/selinux/config</span><br></pre></td></tr></table></figure><p>添加一行内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX&#x3D;disabled</span><br></pre></td></tr></table></figure><p><code>:wq</code> 保存退出</p><p>重启系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ shutdown -r now</span><br></pre></td></tr></table></figure><ol start="3"><li>安装第三方yum源</li></ol><p>安装下载工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install wget</span><br></pre></td></tr></table></figure><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www.atomicorp.com/installers/atomic</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh ./atomic</span><br></pre></td></tr></table></figure><p>更新yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum check-update</span><br></pre></td></tr></table></figure><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><ol><li>删除系统自带的软件包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove httpd* php*</span><br></pre></td></tr></table></figure><ol start="2"><li>安装nginx</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>设置nginx开机启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig nginx on</span><br></pre></td></tr></table></figure><ol start="4"><li>启动nginx</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service nginx start</span><br></pre></td></tr></table></figure><ol start="5"><li>如果启动时出现80端口97错误:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen80;</span><br><span class="line">listen[::]80 default_server</span><br></pre></td></tr></table></figure><p><code>:wq</code>保存退出</p><p>重启nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service nginx restart</span><br></pre></td></tr></table></figure><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><ol><li>检查当前安装的php</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum list installed | grep php</span><br></pre></td></tr></table></figure><p>如果有已安装的php,先删除, 如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove php.x86_64 php-cli.x86_64 php-common.x86_64</span><br></pre></td></tr></table></figure><ol start="2"><li>配置源</li></ol><ul><li>Centos 5.X</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm</span><br></pre></td></tr></table></figure><ul><li>CentOs 6.x</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm</span><br></pre></td></tr></table></figure><ul><li>CentOs 7.X</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line">$ rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure><p>如果想删除上面安装的包，重新安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep webstatic</span><br><span class="line">$ rpm -e [上面搜索到的包即可]</span><br></pre></td></tr></table></figure><ol start="3"><li>执行安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install php56w.x86_64</span><br><span class="line">$ yum –enablerepo=webtatic install php56w-devel</span><br><span class="line">$ yum install php56w-gd.x86_64 php56w-ldap.x86_64 php56w-mbstring.x86_64 php56w-mcrypt.x86_64 php56w-mysql.x86_64 php56w-pdo.x86_64 php56w-opcache.x86_64</span><br></pre></td></tr></table></figure><ol start="4"><li>安装php-fpm</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install php56w-fpm</span><br></pre></td></tr></table></figure><p>设置php-fpm开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig php-fpm on</span><br></pre></td></tr></table></figure><p>启动php-fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/php-fpm start</span><br></pre></td></tr></table></figure><ul><li>注：如果想更换到php5.5或5.4版本, 直接把上面的56w换成55w或者54w就可以了</li></ul><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y mysql mysql-server</span><br></pre></td></tr></table></figure><p>启动MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure><p>设为开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig mysqld on</span><br></pre></td></tr></table></figure><ol start="2"><li>拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/share/mysql/my-medium.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure><ol start="3"><li>为root账户设置密码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql_secure_installation</span><br></pre></td></tr></table></figure><p>回车，根据提示输入Y，输入2次密码，回车，根据提示一路输入Y最后出现：Thanks for using MySQL!<br>MySql密码设置完成，重新启动 MySQL：</p><p>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld restart</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld stop</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure><h2 id="启动前的配置"><a href="#启动前的配置" class="headerlink" title="启动前的配置"></a>启动前的配置</h2><ol><li>配置nginx</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /etc/nginx/conf.d/*</span><br><span class="line">$ vi /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p>添加如下内容 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    root &#x2F;var&#x2F;www;</span><br><span class="line">    location ~ .*\.(php|php5)?$&#123;</span><br><span class="line">        #fastcgi_pass unix:&#x2F;tmp&#x2F;php-cgi.sock;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#说明: &#x2F;var&#x2F;www 为web根目录, location &#x2F; … 为url的rewrite,隐藏 index.php</span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service nginx restart</span><br></pre></td></tr></table></figure><ol start="2"><li>重启php-fpm</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service php-fpm restart</span><br></pre></td></tr></table></figure><p>在客户端浏览器输入服务器IP地址(如: 127.0.0.1)，可以看到相关的配置信息！<br>说明lnmp配置成功！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Weex 2.0 中的一些坑</title>
      <link href="/2017/09/02/Weex2.0%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2017/09/02/Weex2.0%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>因为当时刚好前端要迁移到 Vue, 然后 Weex 风头正大, 所以选择了它. 没想到国内开源水深啊, 后期才发现可能是 KPI 的产物.<br>但是这个小混合 app 也没必要下车了, 踩着坑走吧, 反正估计没有下个版本…</p><p>简单记录几个踩过的坑.</p><a id="more"></a><ol><li><p>安卓平台中, dom 中绑定的方法必须有定义, 否则不报错但是可能会导致数据的双向绑定失效</p></li><li><p>input 组件不要使用 <code>v-model</code> 来绑定值, 虽然表面上看起来没问题, 但是实际上在安卓平台可能上会导致数据的双向绑定失效, 应该使用 <code>@input</code> 事件, 不需要传参数, 在对应的 method 中可以接收到 event, <code>event.value</code> 就是 input 输入的值，只能在 <code>@input</code> 或 <code>@change</code> 中更改 input 的值。</p></li><li><p>动态绑定样式类 <code>:class</code>, 值为数组, 可以写成 <code>:class=&quot;[classA]&quot;</code>, 在 data 中 <code>classA: &#39;className&#39;</code>。</p></li><li><p>图片。虽然官网中 image 标签条目中说道目前只支持从存储 <code>file:///</code> 中加载图片，不支持应用程序资源文件，但是我们在 path 条目中可以看到新版本中可以使用 <code>local:///</code> 来加载 drawable 目录下的图片资源，不要加后缀。</p></li><li><p>navigator，<code>navigator.push()</code> 方法可以跳转到一个页；<code>navigator.pop()</code> 方法可以离开一个页，注意 pop 方法好像只能 pop 掉自己，也就是当前页，否则可能会报错，程序闪退。</p></li><li><p>这是 vue 的问题, 由于 JavaScript 的限制， Vue 不能检测以下变动的数组：</p></li></ol><ul><li>当你利用索引直接设置一个项时，例如： <code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时，例如： <code>vm.items.length = newLength</code></li></ul><p>为了解决第一类问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果， 同时也将触发状态更新：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(example1.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">example1.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure><p>为了解决第二类问题，可以使用 splice：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example1.items.splice(newLength);</span><br></pre></td></tr></table></figure><p>当你 <code>v-for</code> 一个 object 时, <code>object.key = value</code> 可能不会触发 view 刷新.</p><ol start="7"><li><p>当你在一个 flex 布局外层套上一个干净的 div 时, 可能会导致布局混乱, 在这个 div 上加一个 <code>style=&quot;&quot;</code> 属性可能会解决问题.(这么神奇).</p></li><li><p>本地视频，video 组件播放视频是调用安卓原生的 videoView，所以本地视频的路径就按照原生引用文件的路径的写法。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Sublime 常用快捷键</title>
      <link href="/2017/08/05/sublime%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2017/08/05/sublime%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>别处拷来的…</p><a id="more"></a><p>解决sublime text 总是在新窗口中打开文件<br>Preferences -&gt; Settings – Default -&gt; 搜索open_files_in_new_window，将其true 改为 false 后</p><p>自动安装Package Control：<br>1、通过快捷键 ctrl+` 或者 View &gt; Show Console 菜单打开控制台</p><p>2、粘贴对应版本的代码后回车安装</p><p>适用于 Sublime Text 3：<br>import urllib.request,os;pf=’Package Control.sublime-package’;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),’wb’).write(urllib.request.urlopen(‘<a href="http://sublime.wbond.net/&#39;+pf.replace" target="_blank" rel="noopener">http://sublime.wbond.net/&#39;+pf.replace</a>(‘ ‘,’%20’)).read())<br>离线安装:<br>下载包：<a href="http://github.com/wbond/sublime_package_control" target="_blank" rel="noopener">http://github.com/wbond/sublime_package_control</a><br>解压，并目录改名为 Package Control<br>Preferences-&gt;browse packages 会打开一个目录，然后将刚才的文件夹复制进来。<br>重新打开sublime text后生效</p><p>接下来一定记住先重启软件！<br><a href="https://packagecontrol.io/browse" target="_blank" rel="noopener">https://packagecontrol.io/browse</a> 可用插件列表<br>使用:<br>ctrl+shift+p<br>install package<br>remove package</p><p>编辑器主题 Aprosopo<br>install package -&gt; Theme Aprosopo</p><p>BracketHighlighter (括弧高亮显示)</p><p>SideBarEnhancements (目录管理右键功能)</p><p>ConverToUTF8 (支持UTF-8编码)<br>注：建议修改快捷键，避免与其它冲突。<br>Sublime Text3/Packages/ConverToUTF8/Default (OSX).sublime-keymap</p><p>GBK4subl (使sublime支持gbk编码)<br>需要下载插件：<a href="https://github.com/jeewood/gbk4subl" target="_blank" rel="noopener">https://github.com/jeewood/gbk4subl</a><br>解压后将目录复制到 Sublime Text3/Packages/<br>目录改名为 gbk4subl<br>重启程序</p><p>CSS Format (整理 CSS 格式)</p><p>TrailingSpaces (高亮显示行尾多余空格和Tab，可一键删除)</p><p>Color Picker<br>需要下载插件：<a href="https://github.com/weslly/ColorPicker" target="_blank" rel="noopener">https://github.com/weslly/ColorPicker</a><br>解压后将目录复制到 Sublime Text3/Packages/<br>目录改名为 ColorPicker<br>重启程序<br>使用： mac command+shift+c<br>windows ctrl+shift+c<br>注：如果快捷键失效，有可能是其它插件快捷键冲突（converToUTF8可能性很大）</p><p>Better Completion (支持Javascript、JQuery、Twitter Bootstrap框架、HTML5标签属性提示的插件)<br><a href="https://github.com/Pleasurazy/Sublime-Better-Completion" target="_blank" rel="noopener">https://github.com/Pleasurazy/Sublime-Better-Completion</a><br>install package<br>需重启</p><p>Emmet (HTML CSS 编辑神器)<br>需重启<br>测试：<br>文档中输入 ul＃books&gt;li<em>6 之后 ctrl+e 生成<br>zencoding控制台（ctrl+alt+enter） 输入 ul＃books&gt;li</em>6</p><p>DocBlockr (自动注释，自动解析函数、变量、参数)<br>需重启<br>使用： 在function、var 上一行输入－》 /**回车</p><p>MarkdownEditing（markdown格式查看，编辑）</p><p>JsFormat（将压缩的.min.js格式化）</p><p>Minify（压缩js,css）</p><p>SublimeCodeintel (支持方法跳转和自动提示)</p><p>SFTP (ftp,sftp)</p><p>Evernote<br>Preferences -&gt; Package Control:Install Package -&gt; evernote</p><p>获得evernote api接口 Developer Tokens<br>Preferences -&gt; Package Settings -&gt; Evernote -&gt; Reconfigure Authorization</p><p>会在浏览器中打开 <a href="https://www.evernote.com/api/DeveloperToken.action" target="_blank" rel="noopener">https://www.evernote.com/api/DeveloperToken.action</a><br>如果是中国区 印象笔记用户请直接打开 <a href="https://app.yinxiang.com/api/DeveloperToken.action" target="_blank" rel="noopener">https://app.yinxiang.com/api/DeveloperToken.action</a><br>申请好Token</p><p>插件 Evernote配置<br>Preferences -&gt; Package Settings -&gt; Evernote -&gt; Settings – User<br>输入 developer token 与 url<br>保存后就可以使用了</p><p>Sublime Text 3 快捷键精华版</p><p>Ctrl+Shift+P：打开命令面板<br>Ctrl+P：搜索项目中的文件<br>Ctrl+G：跳转到第几行<br>Ctrl+W：关闭当前打开文件<br>Ctrl+Shift+W：关闭所有打开文件<br>Ctrl+Shift+V：粘贴并格式化<br>Ctrl+D：选择单词，重复可增加选择下一个相同的单词<br>Ctrl+L：选择行，重复可依次增加选择下一行<br>Ctrl+Shift+L：选择多行<br>Ctrl+Shift+Enter：在当前行前插入新行<br>Ctrl+X：删除当前行<br>Ctrl+M：跳转到对应括号<br>Ctrl+U：软撤销，撤销光标位置<br>Ctrl+J：选择标签内容<br>Ctrl+F：查找内容<br>Ctrl+Shift+F：查找并替换<br>Ctrl+H：替换<br>Ctrl+R：前往 method<br>Ctrl+N：新建窗口<br>Ctrl+K+B：开关侧栏<br>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身<br>Ctrl+F2：设置/删除标记<br>Ctrl+/：注释当前行<br>Ctrl+Shift+/：当前位置插入注释<br>Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的<br>Ctrl+Shift+A：选择当前标签前后，修改标签用的<br>F11：全屏<br>Shift+F11：全屏免打扰模式，只编辑当前文件<br>Alt+F3：选择所有相同的词<br>Alt+.：闭合标签<br>Alt+Shift+数字：分屏显示<br>Alt+数字：切换打开第N个文件<br>Shift+右键拖动：光标多不，用来更改或插入列内容<br>鼠标的前进后退键可切换Tab文件<br>按Ctrl，依次点击或选取，可需要编辑的多个位置<br>按Ctrl+Shift+上下键，可替换行<br>选择类</p><p>Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。</p><p>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</p><p>Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。</p><p>Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</p><p>Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。</p><p>Ctrl+M 光标移动至括号内结束或开始的位置。</p><p>Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</p><p>Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</p><p>Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。</p><p>Ctrl+Shift+] 选中代码，按下快捷键，展开代码。</p><p>Ctrl+K+0 展开所有折叠代码。</p><p>Ctrl+← 向左单位性地移动光标，快速移动光标。</p><p>Ctrl+→ 向右单位性地移动光标，快速移动光标。</p><p>shift+↑ 向上选中多行。</p><p>shift+↓ 向下选中多行。</p><p>Shift+← 向左选中文本。</p><p>Shift+→ 向右选中文本。</p><p>Ctrl+Shift+← 向左单位性地选中文本。</p><p>Ctrl+Shift+→ 向右单位性地选中文本。</p><p>Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。</p><p>Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。</p><p>Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。</p><p>Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。</p><p>编辑类</p><p>Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。</p><p>Ctrl+Shift+D 复制光标所在整行，插入到下一行。</p><p>Tab 向右缩进。</p><p>Shift+Tab 向左缩进。</p><p>Ctrl+K+K 从光标处开始删除代码至行尾。</p><p>Ctrl+Shift+K 删除整行。</p><p>Ctrl+/ 注释单行。</p><p>Ctrl+Shift+/ 注释多行。</p><p>Ctrl+K+U 转换大写。</p><p>Ctrl+K+L 转换小写。</p><p>Ctrl+Z 撤销。</p><p>Ctrl+Y 恢复撤销。</p><p>Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。</p><p>Ctrl+F2 设置书签</p><p>Ctrl+T 左右字母互换。</p><p>F6 单词检测拼写</p><p>搜索类</p><p>Ctrl+F 打开底部搜索框，查找关键字。</p><p>Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。</p><p>Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</p><p>Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。</p><p>Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。</p><p>Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。</p><p>Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</p><p>Esc 退出光标多行选择，退出搜索框，命令框等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>建立 WordPress 站点遇到的一些问题</title>
      <link href="/2017/08/03/%E5%BB%BA%E7%AB%8BWordPress%E7%AB%99%E7%82%B9%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2017/08/03/%E5%BB%BA%E7%AB%8BWordPress%E7%AB%99%E7%82%B9%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>首先从官网上下载最新版本 WordPress , 解压 , 使用 ftp 工具上传到服务器.</li><li>在数据库中创建一个新的数据库和表给 wordPress 程序</li><li>使用浏览器打开服务器端 /wordpress/wp-admin/install.php , 进行数据库等配置</li><li>在 install.php 中配置好数据库后,即可自动建站</li></ol><a id="more"></a><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><ol><li>浏览器 url 中文件名消失, 路径指向 23 目录, 报 403 错误.</li></ol><p>可能是目录权限问题, 为了保证 wordPress 程序后续的更新等文件操作不会出现此问题, 干脆直接把项目文件权限设置为 777</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod -R 777 wordPress&#x2F;*</span><br></pre></td></tr></table></figure><ol start="2"><li>php 文件不能直接打开页面, 而是下载了此文件</li></ol><p>可能是因为 nginx 未将 .php 文件传递给 php 解释器, 修改 nginx 配置文件 <code>/etc/nginx/conf.d/default.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 这里解决路径指向文件夹时,打开此文件夹下的index文档  </span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">       index   index.php index.html;</span><br><span class="line">       try_files $uri $uri&#x2F; &#x2F;index.php?$args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 将.php文件交给监听9000端口的php-fpm</span><br><span class="line"># 传递文件路径,解决状态200但是为空白页的问题</span><br><span class="line">location ~ .*\.php$ &#123;</span><br><span class="line">      root    &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">      fastcgi_pass   127.0.0.1:9000;     </span><br><span class="line">      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">      include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>返回状态码为 200, 但是页面空白</li></ol><p>传入 php-fpm 的文件路径问题, 在 2 中有解决代码</p><ol start="4"><li>更新程序和上传文件时, 可能会遇到输入 FTP 配置的问题</li></ol><p>修改 <code>wordPress/wp-config.php</code> 文件, 末尾加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** 解决更新和上传需要输入主机名ftp问题 **&#x2F;</span><br><span class="line">define(&quot;FS_METHOD&quot;, &quot;direct&quot;);</span><br><span class="line">define(&quot;FS_CHMOD_DIR&quot;, 0777);</span><br><span class="line">define(&quot;FS_CHMOD_FILE&quot;, 0777);</span><br></pre></td></tr></table></figure><ol start="5"><li>上传文件或 wordpress 主题文件时，遇到 nginx 413 错误</li></ol><p>是因为上传的文件大小超过了 nginx 配置的限制， 修改 <code>/etc/nginx/www.conf</code><br>在 html 块中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 20m为要设置的限制大小</span><br><span class="line">client_max_body_size 20m;</span><br></pre></td></tr></table></figure><p>重启 nginx 服务器后, 很有可能还会出现 php 的超过限制大小的错误<br>解决方法，找到php.ini文件，修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 建议值与nginx中的限制大小相近</span><br><span class="line">post_max_size</span><br><span class="line">upload_max_filesize</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
